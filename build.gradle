buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
    }
    dependencies {
        // classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'com.github.johnrengelman.shadow'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.3'
group = 'com.loadingreadyrun.boston' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'boston'

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = '1.8'
compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200514-1.16'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                boston {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                boston {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/datagen')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'boston', '--all', '--output', file('src/generated/resources/')

            mods {
                boston {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.3-34.1.0'
    implementation 'io.undertow:undertow-core:2.1.3.Final'
    compileOnly 'com.google.code.gson:gson:2.8.0'
    compileOnly 'org.jboss.xnio:xnio-nio:3.8.1.Final'
    // shadow 'io.undertow:undertow-servlet:2.0.29.Final'
    // shadow 'io.undertow:undertow-websockets-jsr:2.0.29.Final'
    // implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.6'
    // implementation 'org.nanohttpd:nanohttpd:2.3.1'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "boston",
            "Specification-Vendor": "lrr",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Vendor": "lrr",
            "Implementation-Version": archiveVersion.getOrElse("DEV"),
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

/*
shadowJar {
    archiveClassifier.set("shaded")
    configurations = [
        project.configurations.shadow
    ]
}

reobf.create("shadowJar") {
    dependsOn createMcpToSrg
    setMappings createMcpToSrg.getOutput()
}
*/

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
//def reobfFile = file("$buildDir/reobfShadowJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'reobfShadowJar'
//}

jar.finalizedBy('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
